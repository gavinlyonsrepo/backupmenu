#!/bin/bash
# Module containing misc functions for project: backupmenu 
# Functions: 
# DisplayFunc. exitHandlerFunc, msgFunc, 
# ReadmeFunc, readconfigFunc,  makeDirFunc

#FUNCTION HEADER
# NAME : msgFunc
# DESCRIPTION : prints to screen
#prints line, text and anykey prompts, yesno prompt
# INPUTS : $1 process name $2 text input
# PROCESS :[1]  print line [2] anykey prompt
# [3] print text  "green , red ,blue , norm yellow and highlight" [4] yn prompt, 
# OUTPUT yesno prompt return 1 or 0
function msgFunc
{
	
	case "$1" in 
	
		line) #print blue horizontal line of =
			printf '\033[36;1m%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =
			printf '%s' "${NORMAL}"
		;;
		anykey) #any key prompt, appends second text input to prompt
		    printf '%s' "${GREEN}" 
			read -n 1 -r -s -p "Press any key to continue $2"
			printf '%s\n' "${NORMAL}"
		;;
		
		#print passed text string
		green) printf '%s\n' "${GREEN}$2${NORMAL}" ;;
		red) printf '%s\n' "${RED}$2${NORMAL}" ;;
		blue) printf '%s\n' "${BLUE}$2${NORMAL}" ;;
		yellow)printf '%s\n' "${YELLOW}$2${NORMAL}" ;;
		highlight)printf '%s\n' "${HL}$2${NORMAL}" ;;
		norm) printf '%s\n' "${NORMAL}$2" ;;
			
		yesno) #print yes no quit prompt
			local yesnoVar=""
			while true; do
				read -r yesnoVar
				case $yesnoVar in
					[Yy]*) return 0;;
					[Nn]*) return 1;;
					[Qq]*) exitHandlerFunc exitout;;
					*) printf '%s\n' "${YELLOW}Please answer: (y/Y for yes) OR (n/N for no) OR (q/Q to quit)!${NORMAL}";;
				esac
			done
		;;
		*) 
			printf '%s\n' "ERROR unknown input to msgFunc"
			 ;;
	esac
}


#FUNCTION HEADER
# NAME :  exitHandlerFunc 
# DESCRIPTION: error handler deal with user 
#exits and path not found errors and internet failure 
# INPUTS:  $2  filename 
# PROCESS : exitout DEST 1-6  file error
# or bad argument option input
function exitHandlerFunc
{
	#double square brackets without use of quotes on matching pattern 
	#for glob support
	if [[ "$1" = DEST* ]]
	then
		msgFunc red "Path not found to Destination directory"
	fi
	case "$1" in
			exitout) : ;;
			DEST1) msgFunc red "$DEST1" ;;
			DEST2) msgFunc red "$DEST2" ;;
			DEST3) msgFunc red "$DEST3" ;;
			DEST4) msgFunc red "Path not found to directory" ;;
			DEST5) msgFunc red "$DEST5" ;;
			DEST6) msgfunc red  "$DEST6";;
			README) msgFunc red "Missing Readme file";;
			fileerror) msgFunc red "File error at :"
			msgFunc red "$DEST5/$CONFIG"  ;;
			*) msgFunc yellow "Unknown input to error handler";;
	 esac
	msgFunc yellow "Goodbye $USER!"
	msgFunc anykey "and exit."
	if [ "$1" = "exitout" ]
	then
		#non-error exit
		exit 0
	fi 
	exit 1
}

#FUNCTION HEADER
# NAME : DisplayFunc
# DESCRIPTION : Function to display main menu
function DisplayFunc
{
msgFunc blue "Main Menu:"
	local choiceMainVar
	local optionsMArr=(
	"System backup options       "  \
	"xterm terminal" "View/Edit config file"\
	 "Display Readme" "rsync option" "Exit"\
	)
	select choiceMainVar in "${optionsMArr[@]}"
	do
	case "$choiceMainVar" in
			"${optionsMArr[0]}")  #Full system backup
				clear
				readconfigFunc
				msgFunc anykey
				SystemDestFunc
				exitHandlerFunc exitout 
			;;
			
			"${optionsMArr[1]}")  # open a terminal
				xterm -e "cd  && /bin/bash"
				msgFunc anykey
			;;
			
			"${optionsMArr[2]}")  #config file edit or view
				readconfigFunc "USERCALL"
			;;
			
			"${optionsMArr[3]}")  #Display Readme
				ReadmeFunc
			;;
			
			"${optionsMArr[4]}")  #rsync
				clear
				readconfigFunc
				msgFunc anykey
				rsyncFunc
				msgFunc anykey
				exitHandlerFunc exitout
			;;
			
			*)#exit
				exitHandlerFunc exitout 
			;;
	esac
	break
	done

}

#FUNCTION HEADER
# NAME : ReadmeFunc
# DESCRIPTION : Displays Readme to screen 
function ReadmeFunc
{
	msgFunc line
	msgFunc green "Displaying backupmenu README.md file at $DEST6"
	cd "$DEST6"  || exitHandlerFunc DEST6
	if [ -f README.md.gz  ]
	then
		zless README.md.gz 
	elif [ -f README.md  ] 
	then
		less README.md
	else 
		exitHandlerFunc README
	fi
	msgFunc green "Done!" 
	msgFunc line
	msgFunc anykey
}

#FUNCTION HEADER
# NAME : readconfigFunc
# DESCRIPTION:read the config file into program 
# passed USERCALL
# INPUTS $1 USERCALL when called by user
# OUTPUTS : sets paths for backup function 
# PROCESS : read $DEST5/$CONFIG
function readconfigFunc
{
	#check input if called by user from menu or option
	if [ "$1" = "USERCALL" ]
		then
		cd "$DEST5"  || exitHandlerFunc DEST5
		if [ -f "$DEST5/$CONFIG" ] 
			then
				local choiceCCVar
				msgFunc green "Do you want to edit or view? [e/V]"
				read -r choiceCCVar
				if [ "$choiceCCVar" = "e" ]
					then
						$EDITOR "$DEST5/$CONFIG" || exitHandlerFunc fileerror "$DEST5/$CONFIG"
						clear
						msgFunc green "Exiting config file edit option"
						msgFunc anykey "and exit backupmenu."
						exit 0
					else
					msgFunc green  "Custom paths read from file"
					cat "$DEST5/$CONFIG" || exitHandlerFunc fileerror "$DEST5/$CONFIG"
					msgFunc green "Done!"
					msgFunc anykey
					return
				fi
			else
				exitHandlerFunc fileerror "$DEST5/$CONFIG"
		fi
	fi
	
	#read $CONFIG for system back up paths 
	msgFunc green "Reading config file $CONFIG at:-"
	msgFunc norm "$DEST5"
	msgFunc norm " "
	#check if file there if not use defaults.
	if [ ! -f "$DEST5/$CONFIG" ]
		then
			exitHandlerFunc fileerror "$DEST5/$CONFIG"
		return
	fi
	cd "$DEST5"  || exitHandlerFunc DEST5
	# shellcheck disable=SC1091
	source "$CONFIG" || exitHandlerFunc fileerror "$DEST5/$CONFIG"
	msgFunc green  "Custom paths read from file"
	msgFunc norm " "
	cat "$CONFIG" || exitHandlerFunc fileerror "$DEST5/$CONFIG"
	msgFunc norm " "
	msgFunc green "Done!"
}


#FUNCTION HEADER
# NAME : makeDirFunc
# DESCRIPTION :  makes a directory with time/date stamp and enters it
#Directory used for program output and backups. 
function makeDirFunc
{
	local dirVar=""
	dirVar=$(date +%H%M-%d%b%y)"$1"
	mkdir "$dirVar"
	cd "$dirVar" || exitHandlerFunc DEST4
	msgFunc norm "Directory for output made at:-"
	pwd	 
}

