#!/bin/bash
# Module containing misc functions for project: backupmenu 
# Functions: 
# DisplayFunc. exitHandlerFunc, 
# ReadmeFunc, readconfigFunc,  makeDirFunc


#FUNCTION HEADER
# NAME :  exitHandlerFunc 
# DESCRIPTION: error handler deal with user 
#exits and path not found errors and internet failure 
# INPUTS:  $2  filename 
# PROCESS : exitout DEST 1-6  file error
# or bad argument option input
function exitHandlerFunc
{
	#double square brackets without use of quotes on matching pattern 
	#for glob support
	if [[ "$1" = DEST* ]]
	then
		bmtPrintFunc red "Path not found to Destination directory"
	fi
	case "$1" in
			exitout) : ;;
			DEST1) bmtPrintFunc red "$DEST1" ;;
			DEST2) bmtPrintFunc red "$DEST2" ;;
			DEST3) bmtPrintFunc red "$DEST3" ;;
			DEST4) bmtPrintFunc red "Path not found to directory" ;;
			DEST5) bmtPrintFunc red "$DEST5" ;;
			DEST6) bmtPrintFuncred  "$DEST6";;
			README) bmtPrintFunc red "Missing Readme file";;
			fileerror) bmtPrintFunc red "File error at :"
			bmtPrintFunc red "$DEST5/$CONFIG"  ;;
			*) bmtPrintFunc yellow "Unknown input to error handler";;
	 esac
	bmtPrintFunc b_yellow "Goodbye $USER!"
	bmtPromptFunc anykey "and exit." b_green
	if [ "$1" = "exitout" ]
	then
		#non-error exit
		exit 0
	fi 
	exit 1
}

#FUNCTION HEADER
# NAME : DisplayFunc
# DESCRIPTION : Function to display main menu
function DisplayFunc
{
bmtPrintFunc b_cyan "Main Menu:"
	local choiceMainVar
	local optionsMArr=(
	"System backup options       "  \
	"xterm terminal" "View/Edit config file"\
	 "Display Readme" "rsync option" "Exit"\
	)
	select choiceMainVar in "${optionsMArr[@]}"
	do
	case "$choiceMainVar" in
			"${optionsMArr[0]}")  #Full system backup
				clear
				readconfigFunc
				bmtPromptFunc anykey "" b_green
				SystemDestFunc
				exitHandlerFunc exitout 
			;;
			
			"${optionsMArr[1]}")  # open a terminal
				xterm -e "cd  && /bin/bash"
				bmtPromptFunc anykey "" b_green
			;;
			
			"${optionsMArr[2]}")  #config file edit or view
				readconfigFunc "USERCALL"
			;;
			
			"${optionsMArr[3]}")  #Display Readme
				ReadmeFunc
			;;
			
			"${optionsMArr[4]}")  #rsync
				clear
				readconfigFunc
				bmtPromptFunc anykey "" b_green
				rsyncFunc
				bmtPromptFunc anykey "" b_green
				exitHandlerFunc exitout
			;;
			
			*)#exit
				exitHandlerFunc exitout 
			;;
	esac
	break
	done

}

#FUNCTION HEADER
# NAME : ReadmeFunc
# DESCRIPTION : Displays Readme to screen 
function ReadmeFunc
{
	bmtPromptFunc line "="  b_cyan
	bmtPrintFunc  b_green "Displaying backupmenu README.md file at $DEST6"
	cd "$DEST6"  || exitHandlerFunc DEST6
	if [ -f README.md.gz  ]
	then
		zless README.md.gz 
	elif [ -f README.md  ] 
	then
		less README.md
	else 
		exitHandlerFunc README
	fi
	bmtPrintFunc  b_green "Done!" 
	bmtPromptFunc line "="  b_cyan
	bmtPromptFunc anykey "" b_green
}

#FUNCTION HEADER
# NAME : readconfigFunc
# DESCRIPTION:read the config file into program 
# passed USERCALL
# INPUTS $1 USERCALL when called by user
# OUTPUTS : sets paths for backup function 
# PROCESS : read $DEST5/$CONFIG
function readconfigFunc
{
	#check input if called by user from menu or option
	if [ "$1" = "USERCALL" ]
		then
		cd "$DEST5"  || exitHandlerFunc DEST5
		if [ -f "$DEST5/$CONFIG" ] 
			then
				local choiceCCVar
				bmtPrintFunc  b_green "Do you want to edit or view? [e/V]"
				read -r choiceCCVar
				if [ "$choiceCCVar" = "e" ]
					then
						$EDITOR "$DEST5/$CONFIG" || exitHandlerFunc fileerror "$DEST5/$CONFIG"
						clear
						bmtPrintFunc  b_green "Exiting config file edit option"
						bmtPromptFunc anykey "and exit backupmenu." b_green
						exit 0
					else
						bmtPrintFunc  b_green  "Custom paths read from file"
						cat "$DEST5/$CONFIG" || exitHandlerFunc fileerror "$DEST5/$CONFIG"
						bmtPrintFunc  b_green "Done!"
						bmtPromptFunc anykey "" b_green
						return
				fi
			else
				makeConfigFunc
		fi
	fi
	
	#read $CONFIG for system back up paths 
	bmtPrintFunc  b_green "Reading config file $CONFIG at:-"
	bmtPrintFunc norm "$DEST5"
	bmtPrintFunc norm " "
	cd "$DEST5"  || exitHandlerFunc DEST5
	#check if file there if not use defaults.
	if [ ! -f "$DEST5/$CONFIG" ]
		then
			makeConfigFunc
		return
	fi
	# shellcheck disable=SC1091
	source "$CONFIG" || exitHandlerFunc fileerror "$DEST5/$CONFIG"
	bmtPrintFunc  b_green  "Custom paths read from file"
	bmtPrintFunc norm " "
	cat "$CONFIG" || exitHandlerFunc fileerror "$DEST5/$CONFIG"
	bmtPrintFunc norm " "
	bmtPrintFunc  b_green "Done!"
}


#FUNCTION HEADER
# NAME : makeDirFunc
# DESCRIPTION :  makes a directory with time/date stamp and enters it
#Directory used for program output and backups. 
function makeDirFunc
{
	local dirVar=""
	dirVar=$(date  +%d%b%y-%H%M)"$1"
	mkdir "$dirVar"
	cd "$dirVar" || exitHandlerFunc DEST4
	bmtPrintFunc norm "Directory for output made at:-"
	pwd	 
}

#FUNCTION HEADER
# NAME : makeConfigFunc
# DESCRIPTION :  If the config file does not exist provides a option 
# to get a dummy default  from github with curl command.
function makeConfigFunc
{
	bmtPrintFunc b_yellow " Warning :: Config File does not exist"
	bmtPrintFunc norm "Do u want to fetch the dummy default file with curl from github? [y/N]"
	bmtPromptFunc yesno yes # y/N
	case $? in
		0)  #yes
			curl -o backupmenu.cfg  https://raw.githubusercontent.com/gavinlyonsrepo/backupmenu/master/documentation/backupmenu.cfg
			bmtPrintFunc norm "backupmenu.cfg downloaded from github."
			bmtPrintFunc norm "Please Restart."
			exitHandlerFunc  exitout
		;;
		2) #no
			exitHandlerFunc fileerror "$DEST5/$CONFIG"
		;;
	esac
}
